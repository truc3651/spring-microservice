server:
  port: 8004

app:
  eureka-server: localhost
  eureka-username: username
  eureka-password: password
  product-service: http://product
  recommendation-service: http://recommendation
  review-service: http://review

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

# health check
management.endpoint.health.show-details: always
management.endpoints.web.exposure.include: health

#server.forward-headers-strategy: framework
api:
  version: 1.0.0
  title: Sample API
  description: Description of the API...
  termsOfService: MY TERMS OF SERVICE
  license: MY LICENSE
  licenseUrl: MY LICENSE URL
  externalDocDesc: MY WIKI PAGE
  externalDocUrl: MY WIKI URL
  contact:
    name: NAME OF CONTACT
    url: URL TO CONTACT
    email: contact@mail.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  product-composite:

    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a **404 - Not Found** error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned
        
    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be 
        split up and stored as separate product-info, recommendation 
        and review entities.
        # Expected error responses
        1. If a product with the same productId as specified in the 
        posted information already exists, an **422 - Unprocessable 
        Entity** error with a "duplicate key" error message will be 
        Returned
    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews 
        related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, that is, 
        it can be called several times with the same response.
        This means that a delete request of a non-existing product will 
        return **200 Ok**.

springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: com.example.composite
  pathsToMatch: /**

  swagger-ui:
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
    oauth:
      clientId: writer
      clientSecret: secret-writer
      useBasicAuthenticationWithAccessCodeGrant: true
  oAuthFlow:
#    authorizationUrl: https://localhost:8443/oauth2/authorize
#    tokenUrl: https://localhost:8443/oauth2/token
    authorizationUrl: https://localhost:9999/oauth2/authorize
    tokenUrl: https://localhost:9999/oauth2/token

# security
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://localhost:9999

spring:
  application:
    name: product-composite
  cloud:
    stream:
      default:
        contentType: application/json
      kafka:
        binder:
          brokers: localhost:9092
      bindings:
        productProducer-out-0:
          destination: product-topic
          producer:
            partitionKeyExpression: headers.partitionKey
            partitionCount: 2
        recommendationProducer-out-0:
          destination: recommendation-topic
          producer:
            partitionKeyExpression: headers.partitionKey
            partitionCount: 2
        reviewProducer-out-0:
          destination: review-topic
          producer:
            partitionKeyExpression: headers.partitionKey
            partitionCount: 2
